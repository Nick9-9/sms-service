@using Model.ViewModels.CompanyViewModels;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model IEnumerable<CompanyViewModel>
@{
    ViewData["Title"] = Localizer["Index"];
}
<!DOCTYPE html>
<html>
<head>
    <title>@Localizer["Index"]</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
 
  

</head>
<body>
    <h2>@Localizer["Campaign"]</h2>

    <div id="tables">
        <p>
            <a class="btn btn-success" asp-action="Create">@Localizer["Create New"]</a>
        </p>
        <div class="container">
            @*<input type="text" v-model.lazy.trim="name" class="form-control" placeholder="Search for ..." />*@

            <label>@Localizer["Search"]</label>
            <input v-model="searchValue">
            <button value="Search" v-on:click="getData" class="btn btn-primary">@Localizer["Search"]</button>
            <br />
            <label>@Localizer["Campaigns on page"]:</label><select v-model.lazy="CountOnPage" v-on:change="getData">
                <option>1</option>
                <option>2</option>
                <option>5</option>
                <option>10</option>
                <option>15</option>
                <option>20</option>
            </select>

            <br />
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <td>@Html.DisplayNameFor(model => model.Name)</td>
	                    <td>@Html.DisplayNameFor(model => model.Description)</td>
                        <td>@Html.DisplayNameFor(model => model.IsPaused)</td>
						<td></td>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in Campaigns">
                        <td>{{item.name}}</td>
                        <td>{{item.description}}</td>
	                    <td>
                            <button class="btn btn-warning" v-if="!item.isPaused" id="PauseButton" v-on:click="changeState(item.id, true)">@Localizer["Pause"]</button>
                                                        <button class="btn btn-dark" v-if="item.isPaused" id="ResumeButton" v-on:click="changeState(item.id, false)">@Localizer["Resume"]</button>
</td>
	                    <td>
		                    <a class="btn btn-success" v-bind:href="'/Company/Details?companyId='+item.id">@Localizer["Details"]</a>
	                    </td>
                    </tr>
                </tbody>
            </table>
            <div style="padding:inherit" class="btn-group">
                <button class="btn btn-default" v-on:click="previousPage"><span class='glyphicon glyphicon-triangle-left' /></button>
                <button class="btn btn-default" v-for="pageNumber in pages" v-on:click="getPageByNumber(pageNumber)">{{pageNumber}}</button>
                <button class="btn btn-default" v-on:click="nextPage"><span class='glyphicon glyphicon-triangle-right' /></button>
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/vue"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="//unpkg.com/vue-plain-pagination@0.2.1"></script>
<script>

	var Vue1 = new Vue({

		el: "#tables",
		data: {
			Campaigns: [],
			page: 1,
			CountOnPage: 5,
			PageCount: 1,
			pages: [],
			searchValue: ""
		},
		methods: {
			getCampaigns() {
				axios({
						method: 'post',
						url: '/Company/Get',
						params: {
							page: this.page,
							countOnPage: this.CountOnPage,
							searchValue: this.searchValue
						}
					})
					.then(response => {
						this.Campaigns = response.data;
					})
					.catch(error => {
						console.log(error);
					})
					.finally();
			},
			getCampaignsCount() {
				axios({
						method: 'post',
						url: '/Company/GetCampaignsCount',
						params: {
							searchValue: this.searchValue
						}
					})
					.then(response => {
						if (response.data % this.CountOnPage == 0)
							this.PageCount = response.data / this.CountOnPage;
						else
							this.PageCount = (response.data / this.CountOnPage) + 1;
						this.pages = [];
						for (let i = 1; i <= this.PageCount; i++) {
							this.pages.push(i);
						}
					})
					.catch(error => {
						console.log(error);
					})
					.finally();
			},
			getData() {
				this.getCampaigns();
				this.getCampaignsCount();
			},
			nextPage() {
				if (this.page < parseInt(this.PageCount)) {
					this.page++;
					this.getData();
				}
			},
			previousPage() {
				if (this.page > 1) {
					this.page--;
					this.getData();
				}
			},
			getPageByNumber(pageNum) {
				this.page = pageNum;
				this.getData();
			},
			changeState(companyId, state) {

				axios({
					type: "POST",
					url: "/Company/ChangeCampaignState/",
					params: {
						companyId: companyId,
						newState: state 
					}
				})
					.then(response => {
						this.getData();
					});
			}
		},
		mounted() {
			this.getData();
		}

	});


</script>

</body>
</html>